?VCorpus
library("tm")
?VCorpus
collection <- VCorpus(DirSource(data.path, encoding = "UTF-8"))
#Choose the 'en_us' folder with data
data.path <- choose.dir()
collection <- VCorpus(DirSource(data.path, encoding = "UTF-8"))
summary(collection)
head(collection[[1]]$content)
length(collection[[1]]$content)
textDesc <- function(txt) {
lines <- length(txt)
avgChar <- mean(nchar(txt))
c(lines, avgChar)
}
textDesc(collection[[1]]$content)
?words
install.packages("ngram")
library(ngram)
textDesc <- function(txt) {
lines <- length(txt)
words <- wordcount(txt)
avgChar <- mean(nchar(txt))
c(lines, words, avgChar)
}
textDesc(collection[[1]]$content)
37334131 / 899288.000
textDesc <- function(txt) {
lines <- length(txt)
words <- wordcount(txt)
avgChar <- mean(nchar(txt))
avgWords <- words / lines
c(lines = lines, words = words, avgChar = avgChar, avgWords = avgWords)
}
textDesc(collection[[1]]$content)
?rbind
rbind(textDesc(collection[[1]]$content),
textDesc(collection[[2]]$content),
textDesc(collection[[3]]$content))
c(title = collection[[1]]$meta$id), textDesc(collection[[1]]$content))
c(title = collection[[1]]$meta$id, textDesc(collection[[1]]$content))
rbind(c(collection[[1]]$meta$id, textDesc(collection[[1]]$content)),
c(collection[[2]]$meta$id, textDesc(collection[[2]]$content)),
c(collection[[3]]$meta$id, textDesc(collection[[3]]$content)))
?tm_map
?tmTolower
?tmToLower
collection <- tm_map(collection, removePunctuation)
collection <- tm_map(collection, stripWhitespace)
collection <- tm_map(collection, removeWords)
?removeWords
collection <- tm_map(collection, removeWords, stopwords)
collection <- tm_map(collection, removeWords, stopwords())
rbind(c(title = collection[[1]]$meta$id, textDesc(collection[[1]]$content)),
c(title = collection[[2]]$meta$id, textDesc(collection[[2]]$content)),
c(title = collection[[3]]$meta$id, textDesc(collection[[3]]$content)))
blogs_sample <- sample(collection[[1]]$content, 1000)
news_sample <- sample(collection[[2]]$content, 1000)
twitter_sample <- sample(collection[[3]]$content, 1000)
collection <- VCorpus(VectorSource(c(blogs_sample, news_sample, twitter_sample)))
summary(collection)
rm(collection)
collection <- VCorpus(VectorSource(c(blogs_sample, news_sample, twitter_sample)))
collection[[1]]$content
rm(collection)
collection <- Corpus(VectorSource(c(blogs_sample, news_sample, twitter_sample)))
collection <- VCorpus(c(blogs_sample, news_sample, twitter_sample))
?VectorSource
collection <- VCorpus(VectorSource(blogs_sample, news_sample, twitter_sample))
?VCorpus
collection <- VCorpus(VectorSource(list(blogs_sample, news_sample, twitter_sample)))
summary(collection)
collection[[1]]$meta
rbind(c(title = collection[[1]]$meta$id, textDesc(collection[[1]]$content)),
c(title = collection[[2]]$meta$id, textDesc(collection[[2]]$content)),
c(title = collection[[3]]$meta$id, textDesc(collection[[3]]$content)))
collection <- tm_map(collection, removePunctuation)
collection <- tm_map(collection, stripWhitespace)
collection <- tm_map(collection, removeWords, stopwords())
rbind(c(title = collection[[1]]$meta$id, textDesc(collection[[1]]$content)),
c(title = collection[[2]]$meta$id, textDesc(collection[[2]]$content)),
c(title = collection[[3]]$meta$id, textDesc(collection[[3]]$content)))
ollection <- VCorpus(VectorSource(list(blogs = blogs_sample,
news = news_sample,
twitter = twitter_sample)))
collection <- VCorpus(VectorSource(list(blogs = blogs_sample,
news = news_sample,
twitter = twitter_sample)))
rm(ollection)
summary(collection)
collection[[1]]$meta
head(collection[[1]]$content)
collection <- tm_map(collection, removeWords, stopwords())
collection <- tm_map(collection, removePunctuation)
collection <- tm_map(collection, stripWhitespace)
head(collection[[1]]$content)
profanities <- readLines("profanities.txt")
profanities <- readLines("profanities.txt")
collection <- tm_map(collection, removeWords, profanities)
collection <- tm_map(collection, removePunctuation)
collection <- tm_map(collection, stripWhitespace)
?words
words(collection[[1]]$content)
words(collection)
rbind(c(title = collection[[1]]$meta$id, textDesc(collection[[1]]$content)),
c(title = collection[[2]]$meta$id, textDesc(collection[[2]]$content)),
c(title = collection[[3]]$meta$id, textDesc(collection[[3]]$content)))
wordcloud(collection[[1]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
library(wordcloud)
wordcloud(collection[[1]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
stopwords()
collection[[1]]$content
grep("the", collection[[1]]$content)
collection <- tm_map(collection, removeWords, stopwords())
collection <- tm_map(collection, removeWords, profanities)
collection <- tm_map(collection, removePunctuation)
collection <- tm_map(collection, stripWhitespace)
grep("the", collection[[1]]$content)
head(collection[[1]]$content)
grep("the ", collection[[1]]$content)
head(collection[[1]]$content[592])
collection <- tm_map(collection, tolower)
head(collection[[1]]$content[592])
collection[[1]]$content
collection <- VCorpus(VectorSource(list(blogs_sample,
news_sample,
twitter_sample)))
blogs_sample <- sample(collection[[1]]$content, 1000)
news_sample <- sample(collection[[2]]$content, 1000)
twitter_sample <- sample(collection[[3]]$content, 1000)
collection <- VCorpus(VectorSource(list(blogs_sample,
news_sample,
twitter_sample)))
collection <- tm_map(collection, content_transformer(tolower))
collection[[1]]$content
collection <- tm_map(collection, removeWords, stopwords())
collection <- tm_map(collection, removeWords, profanities)
collection <- tm_map(collection, removePunctuation)
collection <- tm_map(collection, stripWhitespace)
wordcloud(collection[[1]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
warnings()
wordcloud(collection[[1]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
warnings()
png("plot.png")
wordcloud(collection[[1]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("blogs.png")
wordcloud(collection[[1]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("news.png")
wordcloud(collection[[2]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("twitter.png")
wordcloud(collection[[3]]$content, max.words = 200, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
# Exploration
png("blogs.png")
wordcloud(collection[[1]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("news.png")
wordcloud(collection[[2]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("twitter.png")
wordcloud(collection[[3]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
?ngram
str <- "A B A C A B B"
ngram(str, n=2)
ngram(str, n=2) -> test
print(ngram(str), output="full")
print(ngram(str, n = 1), output="full")
test@str_ptr
test@strlen
test@n
test@ngl_ptr
test@ngsize
test@sl_ptr
get.ngrams(test)
get.phrasetable(test)
blogs_unigrams <- ngram(collection[[1]]$content, n=1)
news_unigrams <- ngram(collection[[2]]$content, n=1)
twitter_unigrams <- ngram(collection[[3]]$content, n=1)
collection[[1]]$content
?nword
blogs_unigrams <- ngram(collection[[1]]$content, n=1)
news_unigrams <- ngram(collection[[2]]$content, n=1)
twitter_unigrams <- ngram(collection[[3]]$content, n=1)
class(collection[[1]]$content)
?ngram
dtm <- DocumentTermMatrix(collection)
inspect(dtm)
dtm$i
?DocumentTermMatrix
tdm <- TermDocumentMatrix(collection)
inspect(tdm)
View(as.matrix(tdm))
?removePunctuation
collection <- tm_map(collection, removePunctuation(ucp = T))
collection <- tm_map(collection, removePunctuation, ucp = T))
collection <- tm_map(collection, removePunctuation, ucp = T)
collection <- tm_map(collection, stripWhitespace)
#most common words
tdm <- TermDocumentMatrix(collection)
inspect(tdm)
View(as.matrix(tdm))
collection <- tm_map(collection, removeNumbers)
collection <- tm_map(collection, stripWhitespace)
#most common words
tdm <- TermDocumentMatrix(collection)
inspect(tdm)
View(as.matrix(tdm))
?stemDocument
collection <- tm_map(collection, stemDocument)
install.packages("SnowballC")
collection <- tm_map(collection, stemDocument)
collection <- tm_map(collection, stripWhitespace)
#most common words
tdm <- TermDocumentMatrix(collection)
inspect(tdm)
View(as.matrix(tdm))
png("blogs.png")
wordcloud(collection[[1]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("news.png")
wordcloud(collection[[2]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("twitter.png")
wordcloud(collection[[3]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
blogs_sample <- sample(collection[[1]]$content, 1000)
news_sample <- sample(collection[[2]]$content, 1000)
twitter_sample <- sample(collection[[3]]$content, 1000)
collection <- VCorpus(VectorSource(list(blogs_sample,
news_sample,
twitter_sample)))
collection <- tm_map(collection, content_transformer(tolower))
collection <- tm_map(collection, removeWords, stopwords())
collection <- tm_map(collection, removeWords, profanities)
collection <- tm_map(collection, removePunctuation, ucp = T)
collection <- tm_map(collection, removeNumbers)
#collection <- tm_map(collection, stemDocument) #produces unexpected results
collection <- tm_map(collection, stripWhitespace)
# most common words - wordclouds
png("blogs.png")
wordcloud(collection[[1]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("news.png")
wordcloud(collection[[2]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("twitter.png")
wordcloud(collection[[3]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
#most common words
tdm <- TermDocumentMatrix(collection)
inspect(tdm)
collection <- VCorpus(DirSource(data.path, encoding = "UTF-8"))
set.seed(2137)
blogs_sample <- sample(collection[[1]]$content, 1000)
news_sample <- sample(collection[[2]]$content, 1000)
twitter_sample <- sample(collection[[3]]$content, 1000)
collection <- VCorpus(VectorSource(list(blogs_sample,
news_sample,
twitter_sample)))
# Cleaning
profanities <- readLines("profanities.txt")
collection <- tm_map(collection, content_transformer(tolower))
collection <- tm_map(collection, removeWords, stopwords())
collection <- tm_map(collection, removeWords, profanities)
collection <- tm_map(collection, removePunctuation, ucp = T)
collection <- tm_map(collection, removeNumbers)
#collection <- tm_map(collection, stemDocument) #produces unexpected results
collection <- tm_map(collection, stripWhitespace)
# Exploration
# most common words - wordclouds
png("blogs.png")
wordcloud(collection[[1]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("news.png")
wordcloud(collection[[2]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
png("twitter.png")
wordcloud(collection[[3]]$content, max.words = 100, random.order = FALSE,colors=brewer.pal(8, "Dark2"))
dev.off()
#most common words
tdm <- TermDocumentMatrix(collection)
inspect(tdm)
head(tdm[1])
head(tdm[1,])
head(as.matrix(tdm)[1,])
head(as.matrix(tdm)[,1])
as.matrix(tdm)[,1]
as.matrix(tdm)[,2]
head(as.matrix(tdm)[,2], 20)
head(as.matrix(tdm)[,3], 20)
class(as.matrix(tdm)[,31])
class(as.matrix(tdm)[,1])
head(sort(as.matrix(tdm)[,1], decreasing = T), 20)
head(sort(as.matrix(tdm)[,2], decreasing = T), 20)
head(sort(as.matrix(tdm)[,3], decreasing = T), 20)
sum(as.matrix(tdm)[,1])
install.packages("ggplot2")
library(ggplot2)
a <- head(sort(as.matrix(tdm)[,1], decreasing = T), 20)
a <- sort(as.matrix(tdm)[,1], decreasing = T)
a
a <- head(sort(as.matrix(tdm)[,1], decreasing = T), 20)
g <- ggplot(a) +
geom_bar(stat = "identity")
as.data.frame(a)
a <- as.data.frame(head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
g <- ggplot(a) +
geom_bar(stat = "identity")
g
g <- ggplot(a, aes(y=a)) +
geom_bar(stat = "identity")
g
View(a)
a <- as.data.frame(freq = head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
a <- data.frame(freq = head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
View(a)
g <- ggplot(a, aes(y=freq)) +
geom_bar(stat = "identity")
g
rownames(head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
names(head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
a <- data.frame(word = names(head(sort(as.matrix(tdm)[,1], decreasing = T), 20)), freq = head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
View(a)
g <- ggplot(a, aes(x = word,y=freq)) +
geom_bar(stat = "identity")
g
g <- ggplot(a, aes(x = reorder(word, freq),y=freq)) +
geom_bar(stat = "identity")
g
?reorder
g <- ggplot(a, aes(x = reorder(word, freq, ),y=freq)) +
geom_bar(stat = "identity") +
coord_flip()
g
g <- ggplot(a, aes(x = reorder(word, freq),y=freq)) +
geom_bar(stat = "identity") +
coord_flip()
g
blogs_1grams <- data.frame(word = names(head(sort(as.matrix(tdm)[,1], decreasing = T), 20)),
freq = head(sort(as.matrix(tdm)[,1], decreasing = T), 20))
news_1grams <- data.frame(word = names(head(sort(as.matrix(tdm)[,2], decreasing = T), 20)),
freq = head(sort(as.matrix(tdm)[,2], decreasing = T), 20))
twitter_1grams <- data.frame(word = names(head(sort(as.matrix(tdm)[,3], decreasing = T), 20)),
freq = head(sort(as.matrix(tdm)[,3], decreasing = T), 20))
g1 <- ggplot(blogs_1grams, aes(x = reorder(word, freq),y=freq)) +
geom_bar(stat = "identity") +
coord_flip()
g1
g2 <- ggplot(news_1grams, aes(x = reorder(word, freq),y=freq)) +
geom_bar(stat = "identity") +
coord_flip()
g2
g3 <- ggplot(twitter_1grams, aes(x = reorder(word, freq),y=freq)) +
geom_bar(stat = "identity") +
coord_flip()
g3
